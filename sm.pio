/*
 * PIO state machine programs for handling operations on the 6502 bus.
 */

// 6502 bus signals
.define public PIN_A0 2         ; also A8 or D0 depending on mux settings
.define public PIN_1MHZ 18
.define public PIN_R_NW 19

// mux control pins
.define public PIN_MUX_ADD_LOW 28
.define public PIN_MUX_ADD_HIGH 27
.define public PIN_MUX_DATA 26

// mux bit masks
.define ADLO 0b011
.define ADHI 0b101
.define DATA 0b110
.define NONE 0b111

.define ADDR_DELAY 7

.program eb2_addr_65C02
; calculates a pico address from the 6502's address and pushes it to the DMA channel
; pico_address = buffer_address + (6502_address * 2)
; (* 2 because we need the u16 that contains the read/write flags AND data)
; 
; jmp pin == A15
; x = 0x20012002 (set by pio_sm_exec)
;
.side_set 3 opt
.wrap_target
loop:   wait    1 gpio, PIN_1MHZ
        wait    0 gpio, PIN_1MHZ         ; wait for 1 -> 0
        set     pindirs, 0    side NONE  ; reset the mux
        mov     osr, x        side ADHI

        set     y, ADDR_DELAY
delay:  jmp     y--, delay
        nop

        in      pins, 7
        jmp     pin, a15_hi   side ADLO
        out     null, 16
a15_hi: 
        mov     y, isr
        mov     isr, osr                 ; isr=2001 or 2002
        in      y, 7                 [1]
        in      pins, 8                  ; A0-A7
        in      null, 1                  ; auto push - 16 bits
.wrap

.program eb2_addr_other
; calculates a pico address from the 6502's address and pushes it to the DMA channel
; pico_address = buffer_address + (6502_address * 2)
; (* 2 because we need the u16 that contains the read/write flags AND data)
; 
; jmp pin == A15
; x = 0x20012002 (set by pio_sm_exec)
;
.side_set 3 opt
.wrap_target
loop:   wait    1 gpio, PIN_1MHZ
        wait    0 gpio, PIN_1MHZ         ; wait for 1 -> 0
        set     pindirs, 0    side NONE  ; reset the mux
        mov     osr, x        side ADHI

        set     y, ADDR_DELAY
delay:  jmp     y--, delay
        wait    1 gpio, PIN_1MHZ

        in      pins, 7
        jmp     pin, a15_hi   side ADLO
        out     null, 16
a15_hi: 
        mov     y, isr
        mov     isr, osr                 ; isr=2001 or 2002
        in      y, 7                 [1]
        in      pins, 8                  ; A0-A7
        in      null, 1                  ; auto push - 16 bits
.wrap

.program eb2_access
; receives a 16bit word containg read/write flags + data from DMA
; if read && read-eabled is set then outputs data to 6502 bus
; if write && not-wite-enabled is clear then gets data from 6502 bus and pushes to DMA
.side_set 3 opt
.wrap_target
loop:
        pull    block                    ; get the flags + data
        out     pins 8        side NONE  ; set up the data in case it's a read
        out     y, 1                     ; get the read-enabled flag
        jmp     pin, read                ; jmp if 6502 read
; Process 6502 write
write:
        out     y, 1                     ; get the write-enabled flag
        jmp     !y, loop                 ; jmp if no write access to this address
        wait 1 gpio PIN_1MHZ  side DATA
        wait 0 gpio PIN_1MHZ             ; wait for 1 -> 0
        in      pins 8
        jmp     loop
read:
; Process 6502 read
        jmp     !y, snoop                ; jmp if no read access to this address
        mov     osr, !null
        out     pindirs 8     side DATA
        jmp loop
;
; BIG NOTE
; We don't have GPIO control of the DIR pin on the data mux ic 
; so we can't snoop the data bus when the 6502 reads from a peripheral
snoop:                                   
        out     y, 1
        jmp     write
.wrap
